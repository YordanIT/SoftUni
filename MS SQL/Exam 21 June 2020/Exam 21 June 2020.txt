01. DDL

CREATE TABLE Cities(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] NVARCHAR(20) NOT NULL,
	CountryCode CHAR(2) NOT NULL CHECK(LEN(CountryCode) = 2)
)

CREATE TABLE Hotels(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] NVARCHAR(30) NOT NULL,
	CityId INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
	EmployeeCount INT NOT NULL,
	BaseRate DECIMAL(18,2)
)

CREATE TABLE Rooms(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	Price DECIMAL(18,2) NOT NULL,
	[Type] NVARCHAR(20) NOT NULL,
	Beds INT NOT NULL,
	HotelId INT FOREIGN KEY REFERENCES Hotels(Id) NOT NULL 
)

CREATE TABLE Trips(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	RoomId INT FOREIGN KEY REFERENCES Rooms(Id) NOT NULL,
	BookDate DATE NOT NULL,
	ArrivalDate DATE NOT NULL,
	ReturnDate DATE NOT NULL,
	CancelDate DATE,
	CHECK(BookDate < ArrivalDate),
	CHECK(ArrivalDate < ReturnDate)
)

CREATE TABLE Accounts(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	FirstName NVARCHAR(50) NOT NULL,
	MiddleName NVARCHAR(20),
	LastName NVARCHAR(50) NOT NULL,
	CityId INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
	BirthDate DATE NOT NULL,
	Email VARCHAR(100) UNIQUE NOT NULL
)

CREATE TABLE AccountsTrips(
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id) NOT NULL,
	TripId INT FOREIGN KEY REFERENCES Trips(Id) NOT NULL,
	Luggage INT NOT NULL CHECK(Luggage >= 0),
	PRIMARY KEY(AccountId, TripId)
)

---------------------------------------------------------------------------------
02. Insert

INSERT INTO Accounts(FirstName, MiddleName, LastName, CityId, BirthDate, Email) VALUES
	('John', 'Smith', 'Smith', 34, '1975-07-21', 'j_smith@gmail.com'),
	('Gosho', NULL, 'Petrov', 11, '1978-05-16', 'g_petrov@gmail.com'),
	('Ivan', 'Petrovich', 'Pavlov', 59, '1849-09-26', 'i_pavlov@softuni.bg'),
	('Friedrich', 'Wilhelm', 'Nietzsche', 2, '1844-10-15', 'f_nietzsche@softuni.bg')

INSERT INTO Trips(RoomId, BookDate, ArrivalDate, ReturnDate, CancelDate) VALUES
(101, '2015-04-12', '2015-04-14', '2015-04-20', '2015-02-02'),
(102, '2015-07-07', '2015-07-15', '2015-07-22', '2015-04-29'),
(103, '2013-07-17', '2013-07-23', '2013-07-24', NULL),
(104, '2012-03-17', '2012-03-31', '2012-04-01', '2012-01-10'),
(109, '2017-08-07', '2017-08-28', '2017-08-29', NULL)

--------------------------------------------------------------------------------------
03. Update

UPDATE Rooms
SET Price *= 1.14
WHERE HotelId IN (5, 7, 9)

---------------------------------------------------------------------------------
04. Delete

DELETE FROM AccountsTrips
WHERE AccountId = 47

DELETE FROM Accounts
WHERE Id = 47

---------------------------------------------------------------------------------
05. EEE-Mails

SELECT 
	a.FirstName,
	a.LastName,
	FORMAT(a.BirthDate, 'MM-dd-yyyy') AS BirthDate,
	c.[Name] AS Hometown,
	a.Email
FROM Accounts AS a
LEFT JOIN Cities AS c
ON a.CityId = c.Id
WHERE Email LIKE 'e%'
ORDER BY c.[Name] ASC

---------------------------------------------------------------------------
06. City Statistics

SELECT
	c.[Name] AS City,
	COUNT(h.[CityId]) AS Hotels
FROM Hotels AS h
JOIN Cities AS c
ON h.CityId = c.Id
GROUP BY h.CityId, c.[Name]
ORDER BY Hotels DESC, City ASC

----------------------------------------------------------------------------
07. Longest and Shortest Trips

SELECT 
	act.AccountId,
	CONCAT(a.FirstName, ' ', a.LastName) AS FullName,
	MAX(DATEDIFF(DAY, t.ArrivalDate, t.ReturnDate)) AS LongestTrip,
	MIN(DATEDIFF(DAY, t.ArrivalDate, t.ReturnDate)) AS ShortestTrip
FROM Accounts AS a
LEFT JOIN AccountsTrips AS act
ON a.Id = act.AccountId
JOIN Trips AS t
ON act.TripId = t.Id
WHERE a.MiddleName IS NULL AND t.CancelDate IS NULL
GROUP BY act.AccountId, a.FirstName, a.LastName
ORDER BY LongestTrip DESC, ShortestTrip ASC

-------------------------------------------------------------------------------
08. Metropolis

SELECT TOP(10)
	c.Id,
	c.[Name],
	c.CountryCode,
	COUNT(a.CityId) AS Accounts
FROM Accounts AS a
JOIN Cities AS c
ON a.CityId = c.Id
GROUP BY a.CityId, c.Id, c.[Name], c.CountryCode
ORDER BY Accounts DESC

------------------------------------------------------------------------------
09. Romantic Getaways

SELECT 
	a.Id,
	a.Email,
	c.[Name] AS City,
	COUNT(*) AS Trips
FROM Accounts AS a
JOIN AccountsTrips AS act
ON a.Id = act.AccountId
JOIN Trips AS t
ON act.TripId = t.Id
JOIN Rooms AS r
ON t.RoomId = r.Id
JOIN Hotels AS h
ON r.HotelId = h.Id
JOIN Cities AS c
ON h.CityId = c.Id
WHERE a.CityId = h.CityId
GROUP BY a.Id, a.Email, c.[Name]
ORDER BY Trips DESC, a.Id ASC

-----------------------------------------------------------------------------------
11. Available Room

CREATE FUNCTION udf_GetAvailableRoom(@HotelId INT, @Date DATE, @People INT)
RETURNS NVARCHAR(MAX)
AS
BEGIN 
	DECLARE @roomId INT = (SELECT TOP(1) r.Id
						    FROM Hotels h
							JOIN Rooms r ON r.HotelId = h.Id
							JOIN Trips t ON t.RoomId = r.Id
							WHERE @HotelId = r.HotelId 
								AND h.Id = @HotelId 
								AND ((@Date NOT BETWEEN ArrivalDate AND ReturnDate) AND CancelDate IS NULL) 
								AND Beds > @People
							ORDER BY r.Price DESC)
 
	IF @roomId IS NULL RETURN 'No rooms available'
 	DECLARE @roomType NVARCHAR(20) = (SELECT [Type] FROM Rooms WHERE Id = @roomId)
 	DECLARE @beds INT = (SELECT Beds FROM Rooms WHERE Id = @roomId)
 	DECLARE @roomPrice DECIMAL(18,2) = (SELECT Price FROM Rooms WHERE Id = @roomId)
 	DECLARE @hotelBaseRate DECIMAL(18,2) = (SELECT h.BaseRate
											FROM Hotels AS h
											JOIN Rooms AS r ON r.HotelId = h.Id
											WHERE r.Id = @roomId)
	DECLARE @totalPrice DECIMAL(18,2) = (@hotelBaseRate + @roomPrice) * @People;
 	RETURN CONCAT('Room ', @roomId, ': ', @roomType, ' (', @beds,' beds) - $', @totalPrice)
END

--------------------------------------------------------------------------------------------------------------------
12. Switch Room

CREATE OR ALTER PROC usp_SwitchRoom (@TripId INT, @TargetRoomId INT)
AS
BEGIN
	IF((SELECT HotelId FROM Rooms WHERE Id = @TargetRoomId) <> 
	   (SELECT HotelId FROM Rooms WHERE (Id = (SELECT RoomId FROM Trips WHERE Id = @TripId))))
	THROW 60000, 'Target room is in another hotel!', 1

	ELSE IF((SELECT Beds FROM Rooms WHERE Id = (SELECT RoomId FROM Trips WHERE Id = @TripId)) <>
	   (SELECT Beds FROM Rooms WHERE Id = @TargetRoomId))
	THROW 60000, 'Not enough beds in target room!', 1
	
	ELSE
		UPDATE Trips
		SET RoomId = @TargetRoomId
		WHERE Id = @TripId
END
