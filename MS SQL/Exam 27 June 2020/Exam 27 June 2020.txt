01. DDL

CREATE TABLE Clients(
	ClientId INT PRIMARY KEY IDENTITY NOT NULL,
	FirstName VARCHAR(50) NOT NULL,
	LastName VARCHAR(50) NOT NULL,
	Phone CHAR(12) CHECK(LEN(Phone) = 12)
)
CREATE TABLE Mechanics(
	MechanicId INT PRIMARY KEY IDENTITY NOT NULL,
	FirstName VARCHAR(50) NOT NULL,
	LastName VARCHAR(50) NOT NULL,
	[Address] VARCHAR(255) NOT NULL
)
CREATE TABLE Models(
	ModelId INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] VARCHAR(50) UNIQUE NOT NULL
)
CREATE TABLE Vendors(
	VendorId INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] VARCHAR(50) UNIQUE NOT NULL
)
CREATE TABLE Parts(
	PartId INT PRIMARY KEY IDENTITY NOT NULL,
	SerialNumber VARCHAR(50) UNIQUE NOT NULL,
	[Description] VARCHAR(255),
	Price DECIMAL(6,2) CHECK(Price > 0), --OR MONEY?????
	VendorId INT FOREIGN KEY REFERENCES Vendors(VendorId) NOT NULL,
	StockQty INT CHECK(StockQty >= 0) DEFAULT(0) NOT NULL
)
CREATE TABLE Jobs(
	JobId INT PRIMARY KEY IDENTITY NOT NULL,
	ModelId INT FOREIGN KEY REFERENCES Models(ModelId),
	[Status] VARCHAR(11) CHECK([Status] IN ('Pending', 'In Progress', 'Finished')) DEFAULT ('Pending') NOT NULL,
	ClientId INT FOREIGN KEY REFERENCES Clients(ClientId) NOT NULL,
	MechanicId INT FOREIGN KEY REFERENCES Mechanics(MechanicId),
	IssueDate DATE NOT NULL,
	FinishDate DATE
)
CREATE TABLE Orders(
	OrderId INT PRIMARY KEY IDENTITY NOT NULL,
	JobId INT FOREIGN KEY REFERENCES Jobs(JobId) NOT NULL,
	IssueDate DATE,
	Delivered BIT DEFAULT(0) NOT NULL
)
CREATE TABLE OrderParts(
	OrderId INT FOREIGN KEY REFERENCES Orders(OrderId) NOT NULL,
	PartId INT FOREIGN KEY REFERENCES Parts(PartId) NOT NULL,
	PRIMARY KEY(OrderId, PartId),
	Quantity INT CHECK(Quantity > 0) DEFAULT(1) NOT NULL
)
CREATE TABLE PartsNeeded(
	JobId INT FOREIGN KEY REFERENCES Jobs(JobId) NOT NULL,
	PartId INT FOREIGN KEY REFERENCES Parts(PartId) NOT NULL,
	PRIMARY KEY(JobId, PartId),
	Quantity INT CHECK(Quantity > 0) DEFAULT(1) NOT NULL
)

---------------------------------------------------------------------------------------------
02. INSERT

INSERT INTO Clients(FirstName, LastName, Phone) VALUES
	('Teri', 'Ennaco', '570-889-5187'),
	('Merlyn', 'Lawler', '201-588-7810'),
	('Georgene', 'Montezuma', '925-615-5185'),
	('Jettie', 'Mconnell', '908-802-3564'),
	('Lemuel', 'Latzke', '631-748-6479'),
	('Melodie', 'Knipp', '805-690-1682'),
	('Candida', 'Corbley', '908-275-8357')

INSERT INTO Parts(SerialNumber, [Description], Price, VendorId) VALUES
	('WP8182119', 'Door Boot Seal', 117.86,	2),
	('W10780048', 'Suspension Rod', 42.81, 1),
	('W10841140', 'Silicone Adhesive', 6.77, 4),
	('WPY055980', 'High Temperature Adhesive', 13.94, 3)

-------------------------------------------------------------------------------------------------------
03. UPDATE

UPDATE Jobs
SET MechanicId = 3, [Status] = 'In Progress'
WHERE [Status] = 'Pending'

------------------------------------------------------------------------------------------------------
04. DELETE

DELETE FROM [OrderParts]
WHERE OrderId = 19
DELETE FROM [Orders]
WHERE OrderId = 19

------------------------------------------------------------------------------------------------
05. Mechanic Assignments

SELECT
	CONCAT(m.FirstName, ' ', m.LastName) AS Mechanic,
	j.[Status],
	j.IssueDate
FROM Mechanics AS m
JOIN Jobs AS j
ON m.MechanicId = j.MechanicId
ORDER BY m.MechanicId ASC, j.IssueDate ASC, j.JobId ASC

----------------------------------------------------------------------------------------------
06. Current Clients

SELECT
	CONCAT(c.FirstName, ' ', c.LastName) AS Client,
	DATEDIFF(DAY, j.IssueDate, '2017-04-24') AS [Days going],
	j.Status
FROM Jobs AS j
JOIN Clients AS c
ON j.ClientId = c.ClientId
WHERE Status <> 'Finished'
ORDER BY [Days going] DESC, c.ClientId ASC

-------------------------------------------------------------------------------------
07. Mechanic Performance

SELECT
	CONCAT(m.FirstName, ' ', m.LastName) AS Mechanic,
	AVG(DATEDIFF(DAY, j.IssueDate, j.FinishDate)) AS [Average Days]
FROM Jobs AS j
JOIN Mechanics AS m
ON j.MechanicId = m.MechanicId
GROUP BY j.MechanicId, m.FirstName, m.LastName
ORDER BY j.MechanicId

----------------------------------------------------------------------------------
08. Available Mechanics

SELECT CONCAT(m.FirstName, ' ', m.LastName) AS Available
FROM Jobs AS j
RIGHT JOIN Mechanics AS m
ON j.MechanicId = m.MechanicId
WHERE j.[Status] NOT IN('In Progress', 'Pending') AND j.MechanicId IS NOT NULL
GROUP BY m.MechanicId, m.FirstName, m.LastName
ORDER BY m.MechanicId ASC

--------------------------------------------------------------------------------
09. Past Expenses

SELECT
	j.JobId,
	ISNULL(SUM(p.Price*op.Quantity),0) AS Total
FROM Jobs AS j
LEFT JOIN Orders AS o
ON j.JobId = o.JobId
LEFT JOIN OrderParts AS op
ON o.OrderId = op.OrderId
LEFT JOIN Parts AS p
ON op.PartId = p.PartId
WHERE j.[Status] = 'Finished'
GROUP BY j.JobId
ORDER BY Total DESC, j.JobId ASC

-------------------------------------------------------------------------------------
12. Cost Of Order

CREATE OR ALTER FUNCTION udf_GetCost(@jobId INT)
RETURNS DECIMAL(18,2)
AS
BEGIN
	RETURN ISNULL((
	SELECT SUM(p.Price*op.Quantity)
	FROM Orders AS o
	JOIN OrderParts AS op
	ON o.OrderId = op.OrderId
	JOIN Parts AS p
	ON op.PartId = p.PartId
	WHERE o.JobId = @jobId), 0)
END

