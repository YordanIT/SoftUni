CREATE DATABASE Service

------------------------------------------------------------------------------
1.0 DDL

CREATE TABLE [Status](
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	[Label] VARCHAR(30) NOT NULL
	)
CREATE TABLE Users(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	Username VARCHAR(30) UNIQUE NOT NULL,
	[Password] VARCHAR(50) NOT NULL,
	[Name] VARCHAR(50),
	Birthdate DATETIME2,
	Age INT CHECK (Age BETWEEN 14 AND 110),
	Email VARCHAR(50) NOT NULL
	)
CREATE TABLE Departments(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] VARCHAR(50) NOT NULL
	)
CREATE TABLE Employees(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	FirstName VARCHAR(25),
	LastName VARCHAR(25),
	Birthdate DATETIME2,
	Age INT CHECK(Age BETWEEN 18 AND 110),
	DepartmentId INT FOREIGN KEY REFERENCES Departments
	)
CREATE TABLE Categories(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] VARCHAR(50) NOT NULL,
	DepartmentId INT FOREIGN KEY REFERENCES Departments NOT NULL
	)
CREATE TABLE Reports(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	CategoryId INT FOREIGN KEY REFERENCES Categories NOT NULL,
	StatusId INT FOREIGN KEY REFERENCES [Status] NOT NULL,
	OpenDate DATETIME2 NOT NULL,
	CloseDate DATETIME2,
	[Description] VARCHAR(200) NOT NULL,
	UserId INT FOREIGN KEY REFERENCES Users NOT NULL,
	EmployeeId INT FOREIGN KEY REFERENCES Employees
)

-------------------------------------------------------------------------------
2.0 INSERT

INSERT INTO Employees (FirstName, LastName, Birthdate, DepartmentId)
	VALUES('Marlo',	'O''Malley',	'1958-9-21', 1),
		  ('Niki', 'Stanaghan', '1969-11-26', 4),
		  ('Ayrton', 'Senna', '1960-03-21', 9),
		  ('Ronnie', 'Peterson', '1944-02-14', 9),
		  ('Giovanna', 'Amati', '1959-07-20', 5)

INSERT INTO Reports(CategoryId, StatusId, OpenDate, CloseDate, [Description], UserId, EmployeeId)
	VALUES(1, 1, '2017-04-13', NULL, 'Stuck Road on Str.133', 6, 2),
		  (6, 3, '2015-09-05', '2015-12-06', 'Charity trail running', 3, 5),
		  (14, 2, '2015-09-07', NULL, 'Falling bricks on Str.58', 5, 2),
		  (4, 3, '2017-07-03', '2017-07-06', 'Cut off streetlight on Str.11', 1, 1)

---------------------------------------------------------------------------------------
3.0 UPDATE

UPDATE Reports
SET CloseDate = GETDATE()
WHERE CloseDate IS NULL

-----------------------------------------------------------------------------------------
4.0 DELETE

DELETE Reports
WHERE StatusId = 4

--------------------------------------------------------------------------------------
5.0 Unassigned Reports

SELECT	
	[Description],
	FORMAT(OpenDate, 'dd-MM-yyyy') AS OpenDate
FROM Reports
WHERE EmployeeId IS NULL
ORDER BY OpenDate, [Description]

-------------------------------------------------------------------------------------
6.0 Reports & Categories

SELECT r.[Description], FORMAT(r.OpenDate, 'dd-MM-yyyy') AS OpenDate
FROM Reports AS r
WHERE EmployeeId IS NULL
ORDER BY r.OpenDate ASC, r.[Description] ASC 

----------------------------------------------------------------------------------------
7.0 Most Reported Category

SELECT 
	r.[Description],
	c.[Name]
FROM Reports AS r
INNER JOIN Categories AS c
ON r.CategoryId = c.Id
WHERE r.CategoryId IS NOT NULL
ORDER BY r.[Description], c.[Name] 

---------------------------------------------------------------------------------
8.0 Birthday Report

SELECT TOP(5) 
	c.[Name] AS CategoryName, 
	COUNT(r.CategoryId) AS ReportsNumber
FROM Reports AS r
RIGHT JOIN Categories AS c
ON r.CategoryId = c.Id
GROUP BY CategoryId, c.[Name]
ORDER BY COUNT(r.CategoryId) DESC, c.[Name] ASC

----------------------------------------------------------------------------------
9.0 Users per Employee 

SELECT 
	u.Username AS Username, 
	c.[Name] AS CategoryName
FROM Reports AS r
INNER JOIN Users AS u
ON r.UserId = u.Id
INNER JOIN Categories AS c
ON r.CategoryId = c.Id
WHERE FORMAT(r.OpenDate, 'mon-dd') = FORMAT(u.Birthdate, 'mon-dd')
ORDER BY u.Username ASC, c.[Name] ASC

-----------------------------------------------------------------------------------
10.0 Full Info

SELECT
	CONCAT(e.FirstName, ' ', e.LastName) AS FullName,
	COUNT(r.EmployeeId) AS UsersCount
FROM Reports AS r
RIGHT JOIN Employees AS e
ON r.EmployeeId = e.Id
GROUP BY r.EmployeeId, e.FirstName, e.LastName
ORDER BY UsersCount DESC, FullName ASC

SELECT 
	CASE WHEN COALESCE(e.FirstName, e.LastName) IS NOT NULL 
	THEN CONCAT(e.FirstName, ' ', e.LastName) 
	ELSE 'None'
	END AS Employee,
	ISNULL(d.[Name], 'None') AS Department,
	ISNULL(c.[Name], 'None') AS Category,
	ISNULL(r.[Description], 'None') AS [Description],
	ISNULL(CONVERT(VARCHAR, (FORMAT(r.OpenDate, 'dd.MM.yyyy'))), 'None') AS OpenDate,
	ISNULL(s.[Label], 'None') AS [Status],
	ISNULL(u.[Name], 'None') AS [User]
FROM Reports AS r
LEFT JOIN Employees AS e
ON r.EmployeeId = e.Id
LEFT JOIN Departments AS d
ON e.DepartmentId = d.Id
LEFT JOIN Categories AS c
ON r.CategoryId = c.Id
LEFT JOIN Status AS s
ON r.StatusId = s.Id
LEFT JOIN Users AS u
ON r.UserId = u.Id
ORDER BY e.FirstName DESC, 
		 e.LastName DESC, 
		 d.[Name] ASC, 
		 c.[Name] ASC,
		 r.[Description] ASC,
		 OpenDate ASC,
		 s.[Label] ASC,
		 u.[Name] ASC

---------------------------------------------------------------------------------------------
11.0 Hours to Complete

CREATE FUNCTION udf_HoursToComplete(@StartDate DATETIME, @EndDate DATETIME)
RETURNS INT
AS
BEGIN
	DECLARE @totalHours INT = DATEDIFF(hour, @StartDate, @EndDate)
	IF(@totalHours IS NULL)
	SET @totalHours = 0
	RETURN @totalHours
END

---------------------------------------------------------------------------------------------
12.0 Assign Employee

CREATE OR ALTER PROC usp_AssignEmployeeToReport(@EmployeeId INT, @ReportId INT)
AS
DECLARE @employeeDepatment INT = (SELECT DepartmentId FROM Employees WHERE Id = @EmployeeId)
DECLARE @reportDepartment INT = (SELECT DepartmentId FROM Categories 
		WHERE Id = (SELECT CategoryId FROM Reports WHERE Id = @ReportId))
IF(@employeeDepatment = @reportDepartment)
BEGIN
	UPDATE Reports
	SET EmployeeId = @EmployeeId
	WHERE Id = @ReportId
END
ELSE
BEGIN
	THROW 60000, 'Employee doesn''t belong to the appropriate department!', 1;
END

